*** builtin.c Tue Jul 26 12:07:43 2005
--- builtin.c.new Wed Jan 14 11:46:24 2009
***************
*** 25,30 ****
--- 25,31 ----
  
  
  #include "awk.h"
+ #include <dirent.h>
  #if defined(HAVE_FCNTL_H)
  #include <fcntl.h>
  #endif
***************
*** 3228,3230 ****
--- 3229,3747 ----
  
  	return tmp_string(the_result, strlen(the_result));
  }
+ 
+ #ifndef __APPLE__
+ #include <sys/sysmacros.h>
+ #endif
+ 
+ /*  do_chdir --- provide dynamically loaded chdir() builtin for gawk */
+ 
+ NODE *
+ do_chdir(tree)
+ NODE *tree;
+ {
+ 	NODE *newdir;
+ 	int ret = -1;
+ 
+ 	if (do_lint && get_curfunc_arg_count() != 1)
+ 		lintwarn("chdir: called with incorrect number of arguments");
+ 
+ 	newdir = get_scalar_argument(tree, 0, FALSE);
+ 	(void) force_string(newdir);
+ 	ret = chdir(newdir->stptr);
+ 	if (ret < 0)
+ 		update_ERRNO();
+ 	free_temp(newdir);
+ 
+ 	/* Set the return value */
+ 	set_value(tmp_number((AWKNUM) ret));
+ 
+ 	/* Just to make the interpreter happy */
+ 	return tmp_number((AWKNUM) 0);
+ }
+ 
+ /* do_readdir --- provide a readdir() function for gawk */
+ 
+ NODE *
+ do_readdir(tree)
+ NODE *tree;
+ {
+ 	NODE *file, *array;
+ 	NODE **aptr;
+ 
+ 	if (do_lint && get_curfunc_arg_count() > 2)
+ 		lintwarn("stat: called with too many arguments");
+ 
+ 	/* directory is first arg, array to hold results is second */
+ 	file = get_scalar_argument(tree, 0, FALSE);
+ 	array = get_array_argument(tree, 1, FALSE);
+ 
+ 	/* empty out the array */
+ 	assoc_clear(array);
+ 
+         /* open the directory */
+ 	(void) force_string(file);
+         DIR *dirp = opendir(file->stptr);
+         if (!dirp) {
+ 		update_ERRNO();
+ 
+ 		set_value(tmp_number((AWKNUM) -1));
+ 
+ 		free_temp(file);
+ 		return tmp_number((AWKNUM) 0);
+ 	}
+ 
+         /* fill in the array */
+ 
+         int i = 0;
+         struct dirent *dp;
+         while ((dp = readdir(dirp)) != NULL) {
+             aptr = assoc_lookup(array, tmp_number((AWKNUM)++i), FALSE);
+             *aptr = make_string(dp->d_name, strlen(dp->d_name));
+         }
+ 
+         closedir(dirp);
+ 
+ 	free_temp(file);
+ 
+ 	/* Set the return value */
+ 	set_value(tmp_number((AWKNUM) i));
+ 
+ 	/* Just to make the interpreter happy */
+ 	return tmp_number((AWKNUM) 0);
+ }
+ 
+ /* format_mode --- turn a stat mode field into something readable */
+ 
+ static char *
+ format_mode(fmode)
+ unsigned long fmode;
+ {
+ 	static char outbuf[12];
+ 	int i;
+ 
+ 	strcpy(outbuf, "----------");
+ 	/* first, get the file type */
+ 	i = 0;
+ 	switch (fmode & S_IFMT) {
+ #ifdef S_IFSOCK
+ 	case S_IFSOCK:
+ 		outbuf[i] = 's';
+ 		break;
+ #endif
+ #ifdef S_IFLNK
+ 	case S_IFLNK:
+ 		outbuf[i] = 'l';
+ 		break;
+ #endif
+ 	case S_IFREG:
+ 		outbuf[i] = '-';	/* redundant */
+ 		break;
+ 	case S_IFBLK:
+ 		outbuf[i] = 'b';
+ 		break;
+ 	case S_IFDIR:
+ 		outbuf[i] = 'd';
+ 		break;
+ #ifdef S_IFDOOR	/* Solaris weirdness */
+ 	case S_IFDOOR:
+ 		outbuf[i] = 'D';
+ 		break;
+ #endif /* S_IFDOOR */
+ 	case S_IFCHR:
+ 		outbuf[i] = 'c';
+ 		break;
+ #ifdef S_IFIFO
+ 	case S_IFIFO:
+ 		outbuf[i] = 'p';
+ 		break;
+ #endif
+ 	}
+ 
+ 	i++;
+ 	if ((fmode & S_IRUSR) != 0)
+ 		outbuf[i] = 'r';
+ 	i++;
+ 	if ((fmode & S_IWUSR) != 0)
+ 		outbuf[i] = 'w';
+ 	i++;
+ 	if ((fmode & S_IXUSR) != 0)
+ 		outbuf[i] = 'x';
+ 	i++;
+ 
+ 	if ((fmode & S_IRGRP) != 0)
+ 		outbuf[i] = 'r';
+ 	i++;
+ 	if ((fmode & S_IWGRP) != 0)
+ 		outbuf[i] = 'w';
+ 	i++;
+ 	if ((fmode & S_IXGRP) != 0)
+ 		outbuf[i] = 'x';
+ 	i++;
+ 
+ 	if ((fmode & S_IROTH) != 0)
+ 		outbuf[i] = 'r';
+ 	i++;
+ 	if ((fmode & S_IWOTH) != 0)
+ 		outbuf[i] = 'w';
+ 	i++;
+ 	if ((fmode & S_IXOTH) != 0)
+ 		outbuf[i] = 'x';
+ 	i++;
+ 
+ 	outbuf[i] = '\0';
+ 
+ 	if ((fmode & S_ISUID) != 0) {
+ 		if (outbuf[3] == 'x')
+ 			outbuf[3] = 's';
+ 		else
+ 			outbuf[3] = 'S';
+ 	}
+ 
+ 	/* setgid without execute == locking */
+ 	if ((fmode & S_ISGID) != 0) {
+ 		if (outbuf[6] == 'x')
+ 			outbuf[6] = 's';
+ 		else
+ 			outbuf[6] = 'l';
+ 	}
+ 
+ 	if ((fmode & S_ISVTX) != 0) {
+ 		if (outbuf[9] == 'x')
+ 			outbuf[9] = 't';
+ 		else
+ 			outbuf[9] = 'T';
+ 	}
+ 
+ 	return outbuf;
+ }
+ 
+ /* do_stat --- provide a stat() function for gawk */
+ 
+ static NODE *
+ _do_stat(NODE *tree, int is_lstat)
+ {
+ 	NODE *file, *array;
+ 	struct stat sbuf;
+ 	int ret;
+ 	NODE **aptr;
+ 	char *pmode;	/* printable mode */
+ 	char *type = "unknown";
+ 	char numstr[64];
+ 
+ 	if (do_lint && get_curfunc_arg_count() > 2)
+ 		lintwarn("stat: called with too many arguments");
+ 
+ 	/* directory is first arg, array to hold results is second */
+ 	file = get_scalar_argument(tree, 0, FALSE);
+ 	array = get_array_argument(tree, 1, FALSE);
+ 
+ 	/* empty out the array */
+ 	assoc_clear(array);
+ 
+ 	/* stat/lstat the file, if error, set ERRNO and return */
+ 	(void) force_string(file);
+ 	ret = is_lstat ? lstat(file->stptr, & sbuf) : stat(file->stptr, & sbuf);
+ 	if (ret < 0) {
+ 		update_ERRNO();
+ 
+ 		set_value(tmp_number((AWKNUM) ret));
+ 
+ 		free_temp(file);
+ 		return tmp_number((AWKNUM) 0);
+ 	}
+ 
+ 	/* fill in the array */
+ 	aptr = assoc_lookup(array, tmp_string("name", 4), FALSE);
+ 	*aptr = dupnode(file);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("dev", 3), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_dev);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("ino", 3), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_ino);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("mode", 4), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_mode);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("nlink", 5), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_nlink);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("uid", 3), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_uid);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("gid", 3), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_gid);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("size", 4), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_size);
+ 
+ 	if (snprintf(numstr, sizeof numstr, "%lld", sbuf.st_size) < sizeof numstr) {
+ 	    aptr = assoc_lookup(array, tmp_string("sizestr", 7), FALSE);
+ 	    *aptr = make_string(numstr, strlen(numstr));
+ 	}
+ 
+ 	aptr = assoc_lookup(array, tmp_string("blocks", 6), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_blocks);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("atime", 5), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_atime);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("mtime", 5), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_mtime);
+ 
+ 	aptr = assoc_lookup(array, tmp_string("ctime", 5), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_ctime);
+ 
+ 	/* for block and character devices, add rdev, major and minor numbers */
+ 	if (S_ISBLK(sbuf.st_mode) || S_ISCHR(sbuf.st_mode)) {
+ 		aptr = assoc_lookup(array, tmp_string("rdev", 4), FALSE);
+ 		*aptr = make_number((AWKNUM) sbuf.st_rdev);
+ 
+ 		aptr = assoc_lookup(array, tmp_string("major", 5), FALSE);
+ 		*aptr = make_number((AWKNUM) major(sbuf.st_rdev));
+ 
+ 		aptr = assoc_lookup(array, tmp_string("minor", 5), FALSE);
+ 		*aptr = make_number((AWKNUM) minor(sbuf.st_rdev));
+ 	}
+ 
+ #ifdef HAVE_ST_BLKSIZE
+ 	aptr = assoc_lookup(array, tmp_string("blksize", 7), FALSE);
+ 	*aptr = make_number((AWKNUM) sbuf.st_blksize);
+ #endif /* HAVE_ST_BLKSIZE */
+ 
+ 	aptr = assoc_lookup(array, tmp_string("pmode", 5), FALSE);
+ 	pmode = format_mode(sbuf.st_mode);
+ 	*aptr = make_string(pmode, strlen(pmode));
+ 
+ 	/* for symbolic links, add a linkval field */
+ 	if (S_ISLNK(sbuf.st_mode)) {
+ 		char buf[BUFSIZ*2 + 1];
+ 		int linksize;
+ 
+ 		linksize = readlink(file->stptr, buf, sizeof(buf) - 1);
+ 		if (linksize >= 0) {
+ 			/* should make this smarter */
+ 			if (linksize >= sizeof(buf))
+ 				fatal("size of symbolic link too big");
+ 			buf[linksize] = '\0';
+ 
+ 			aptr = assoc_lookup(array, tmp_string("linkval", 7), FALSE);
+ 			*aptr = make_string(buf, linksize);
+ 		}
+ 	}
+ 
+ 	/* add a type field */
+ 	switch (sbuf.st_mode & S_IFMT) {
+ #ifdef S_IFSOCK
+ 	case S_IFSOCK:
+ 		type = "socket";
+ 		break;
+ #endif
+ #ifdef S_IFLNK
+ 	case S_IFLNK:
+ 		type = "symlink";
+ 		break;
+ #endif
+ 	case S_IFREG:
+ 		type = "file";
+ 		break;
+ 	case S_IFBLK:
+ 		type = "blockdev";
+ 		break;
+ 	case S_IFDIR:
+ 		type = "directory";
+ 		break;
+ #ifdef S_IFDOOR
+ 	case S_IFDOOR:
+ 		type = "door";
+ 		break;
+ #endif
+ 	case S_IFCHR:
+ 		type = "chardev";
+ 		break;
+ #ifdef S_IFIFO
+ 	case S_IFIFO:
+ 		type = "fifo";
+ 		break;
+ #endif
+ 	}
+ 
+ 	aptr = assoc_lookup(array, tmp_string("type", 4), FALSE);
+ 	*aptr = make_string(type, strlen(type));
+ 
+ 	free_temp(file);
+ 
+ 	/* Set the return value */
+ 	set_value(tmp_number((AWKNUM) ret));
+ 
+ 	/* Just to make the interpreter happy */
+ 	return tmp_number((AWKNUM) 0);
+ }
+ 
+ NODE *
+ do_stat(tree)
+ NODE *tree;
+ {
+     return _do_stat(tree, 0);
+ }
+ 
+ NODE *
+ do_lstat(tree)
+ NODE *tree;
+ {
+     return _do_stat(tree, 1);
+ }
+ 
+ 
+ /* do_pipe -- provide pipe system call for gawk */
+ 
+ NODE *
+ do_pipe(tree)
+ NODE *tree;
+ {
+ 	NODE *array;
+ 	NODE **aptr;
+         int fd[2];
+ 
+ 	if (do_lint && get_curfunc_arg_count() > 1)
+ 		lintwarn("csi_pipe: called with too many arguments");
+ 	
+         array = get_array_argument(tree, 0, FALSE);
+         assoc_clear(array);
+         if (pipe(fd) < 0) {
+             update_ERRNO();
+             set_value(tmp_number((AWKNUM) -1));
+             return tmp_number((AWKNUM) 0);
+         }
+ 
+         if (fcntl(fd[1], F_SETFD, 1) < 0) {
+             update_ERRNO();
+             set_value(tmp_number((AWKNUM) -1));
+             return tmp_number((AWKNUM) 0);
+         }
+ 
+         /* fill in array */
+         aptr = assoc_lookup(array, tmp_number(0), FALSE);
+         *aptr = make_number((AWKNUM) fd[0]);
+         aptr = assoc_lookup(array, tmp_number(1), FALSE);
+         *aptr = make_number((AWKNUM) fd[1]);
+ 
+ 	
+         /* Set the return value */
+ 	set_value(tmp_number((AWKNUM) 0));
+ 
+ 	/* Just to make the interpreter happy */
+ 	return tmp_number((AWKNUM) 0);
+ }
+ 
+ /* do_closefd - allow gawk to directly close a file descriptor. */
+ 
+ NODE *
+ do_closefd(tree)
+ NODE *tree;
+ {
+     NODE *fdp;
+     int fd;
+ 
+     if (do_lint && get_curfunc_arg_count() != 1)
+         lintwarn("do_closefd: called with incorrect number of arguments");
+ 
+     fdp = get_scalar_argument(tree, 0, FALSE);
+     fd = force_number(fdp);
+     set_value(tmp_number((AWKNUM) 
+         close(fd)));
+     return tmp_number((AWKNUM) 0);
+ }
+ 
+ /* do_mkfifo --- provide a mkfifo() function for gawk */
+ 
+ NODE *
+ do_mkfifo(tree)
+ NODE *tree;
+ {
+ 	NODE *fifo, *modep;
+ 
+ 	if (do_lint && get_curfunc_arg_count() != 2)
+ 		lintwarn("do_mkfifo: called with bad arguments");
+ 
+ 	/* fifo is first arg, mode is second */
+ 
+ 	fifo = get_scalar_argument(tree, 0, FALSE);
+         modep = get_scalar_argument(tree, 1, FALSE);
+ 
+         /* make the fifo */
+ 	(void) force_string(fifo);
+         if (mkfifo(fifo->stptr, force_number(modep))) {
+ 		update_ERRNO();
+ 		set_value(tmp_number((AWKNUM) -1));
+ 	} else {
+                 set_value(tmp_number((AWKNUM) 0));
+         }
+ 
+         /* free the force_string */
+         free_temp(fifo);
+ 
+ 	/* Just to make the interpreter happy */
+ 	return tmp_number((AWKNUM) 0);
+ }
+ 
+ /* do_unlink --- provide a unlink() function for gawk */
+ 
+ NODE *
+ do_unlink(tree)
+ NODE *tree;
+ {
+ 	NODE *path;
+ 
+ 	if (do_lint && get_curfunc_arg_count() != 1)
+ 		lintwarn("do_unlink: called with bad arguments");
+ 
+ 	/* path is only argument */
+ 
+ 	path = get_scalar_argument(tree, 0, FALSE);
+ 
+         /* do the deed */
+ 
+ 	(void) force_string(path);
+         if (unlink(path->stptr)) {
+ 		update_ERRNO();
+ 		set_value(tmp_number((AWKNUM) -1));
+ 	} else {
+                 set_value(tmp_number((AWKNUM) 0));
+         }
+ 
+         /* free the force_string */
+ 
+         free_temp(path);
+ 
+ 	/* Just to make the interpreter happy */
+ 	return tmp_number((AWKNUM) 0);
+ }
+ 
+ /* do_lckpwdf --- lock the passwd/shadow file */
+ 
+ NODE *
+ do_lckpwdf(NODE *tree ATTRIBUTE_UNUSED)
+ {
+ /* AIX does not support lckpwdf */
+ #if defined (_AIX)
+         return tmp_number((AWKNUM) 0);
+ #else
+         return tmp_number((AWKNUM) lckpwdf());
+ #endif
+ }
+ 
+ /* do_ulckpwdf --- unlock the passwd/shadow file */
+ 
+ NODE *
+ do_ulckpwdf(NODE *tree ATTRIBUTE_UNUSED)
+ {
+ /* AIX does not support ulckpwdf */
+ #if defined (_AIX)
+         return tmp_number((AWKNUM) 0);
+ #else
+         return tmp_number((AWKNUM) ulckpwdf());
+ #endif
+ }
+ 
